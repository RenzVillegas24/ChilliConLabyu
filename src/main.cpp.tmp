#include <Arduino.h>

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <qrcode.h>

#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <DNSServer.h>
#include "esp_wifi.h"
#include <SPIFFS.h>

const char *ssid = "ChiliConLabyu", 
           *pass = "hotchilli";

WiFiServer serverWifi(80);
WebServer serverWEB(81);
DNSServer serverDNS;
String header;

// Auxiliar variables to store the current output state
String output26State = "off";
String output27State = "off";

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// OLED pins [GND, VCC - 3V3, SCL - D22, SDA - D21]
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
//#define BTN_NAV 4
#define BTN_X 34
#define BTN_Y 39
#define BTN_E 36

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
QRCode qrcode;

#define LEFT 75
#define TOP 76
#define RIGHT 77
#define BOTTOM 78

int setVals[] = {
    2,
    4,
    2};

/*
  Returns click button value in volts or index
  valVolts set as false by default.

  Values:
    INDEX |  VOLTS  |  DESCRIPTION                       |  INFO
    0     |  0v     |  No buttons are being pressed.     |  Stable
    1     |  1980   |  Select button are being pressed.  |  Slightly stable
    2     |  3300   |  Left button are being pressed.    |  Unstable
    3     |  3840   |  Up button are being pressed.      |  Slightly Stable
    4     |  2610   |  Down button are being pressed.    |  Slightly Stable
    5     |  2270   |  Right button are being pressed.   |  Stable

int btnClick(bool valVolts = false)
{

  int btnV = analogRead(BTN_NAV); // Read in the button value
  if (valVolts)
    return btnV;

  const int adj PROGMEM = 50; // adjustment
  const int btnVal[] PROGMEM = {
      1980,
      3300,
      3840,
      2610,
      2270}; // button voltages {select, left, top, bottom, right}

  // Serial.println(btnV);
  if (btnV >= btnVal[0] - adj && btnV <= btnVal[0] + adj)
    return 1;
  else if (btnV >= btnVal[1] - adj && btnV <= btnVal[1] + adj)
    return LEFT;
  else if (btnV >= btnVal[2] - adj && btnV <= btnVal[2] + adj)
    return TOP;
  else if (btnV >= btnVal[3] - adj && btnV <= btnVal[3] + adj)
    return BOTTOM;
  else if (btnV >= btnVal[4] - adj && btnV <= btnVal[4] + adj)
    return RIGHT;
  else
    return 0;
}
*/

/*
  JOYSTICK VERSION
  Returns click button value in volts or index
  valVolts set as false by default.

  Values:
    INDEX |  VOLTS  |  DESCRIPTION                       |  INFO
    0     |  0v     |  No buttons are being pressed.     |  Stable
    1     |  1980   |  Select button are being pressed.  |  Slightly stable
    2     |  3300   |  Left button are being pressed.    |  Unstable
    3     |  3840   |  Up button are being pressed.      |  Slightly Stable
*/
int btnClick(bool valVolts = false)
{
  while (true){
    int btnX = analogRead(BTN_X), // Read in the button value
        btnY = analogRead(BTN_Y), // Read in the button value
        btnE = analogRead(BTN_E); // Read in the button value

    /*
    Serial.print(btnX);
    Serial.print(" ");
    Serial.print(btnY);
    Serial.print(" ");
    Serial.println(btnE);    
    */

    int btn = 0;
    if (btnE == 0)
      btn = 1;
    else if (btnX < 95)
      btn = LEFT;
    else if (4000 <  btnX)
      btn = RIGHT;
    else if (btnY < 95)
      btn = TOP;
    else if (4000 < btnY)
      btn = BOTTOM;

    return btn;
    
  }
}

void wait(bool reverse = false)
{
  if (reverse)
    while (btnClick() == 0)
      delay(1);
  else
    while (btnClick() != 0)
      delay(1);
}

/*
  Alignment:
    Left = 0
    Center = 1
    Right = 2

*/
void drawStr(const char *buf PROGMEM, int x, int y, int align = 0)
{
  // SCREEN_WIDTH / CHAR_PIXEL = MAX_LEN
  // 128 / 6 = 21.3333...
  int maxLen = 21;

  if (align == 1)
    x += int(SCREEN_WIDTH / 2 - (strlen(buf) * 6) / 2);
  else if (align == 2)
    x += maxLen - strlen(buf);

  display.setCursor(x, y);
  display.print(buf);
}

void drawArrow(int rotation, int x, int y, int size, uint16_t color)
{

  if (rotation == LEFT)
  {
    display.drawLine(x + size, y + size, x, y, color);
    display.drawLine(x + size, y - size, x, y, color);
  }
  else if (rotation == TOP)
  {
  }
  else if (rotation == RIGHT)
  {
    display.drawLine(x, y + size, x + size, y, color);
    display.drawLine(x, y - size, x + size, y, color);
  }
  else if (rotation == BOTTOM)
  {
  }
}


int drawMenu(const char *header PROGMEM,
             const char *items[] PROGMEM,
             const int iSz PROGMEM,
             bool hasBack = true,
             int align = 1)
{
  int selectedY = 0;
  while (true)
  {
    int btnEvent = btnClick(),
        itmLen = (strlen(items[selectedY])),
        itmPx = (itmLen * 5) + itmLen - 1 + 16,
        selL = (SCREEN_WIDTH - (itmPx)) / 2;

    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    drawStr(header, 0, 7, align);

    if (hasBack)
    {
      drawArrow(LEFT, 11, 10, 3, SSD1306_WHITE);
      if (selectedY == -1)
        display.drawRoundRect(5, 4, 17, 13, 4, SSD1306_WHITE);
    }

    if (selectedY != -1)
      display.drawRoundRect(selL, 21 + 12 * selectedY, itmPx, 13, 4, SSD1306_WHITE);

    for (int i = 0; i < iSz; i++)
      drawStr(items[i], 0, 24 + (12 * i), align);

    display.display();
    while (btnClick() != 0)
    {
      btnEvent = btnClick();

      if (btnEvent == 1)
      {
        if (selectedY == -1 || selectedY == iSz)
        {
          display.fillRoundRect(5, 4, 17, 13, 4, SSD1306_WHITE);
          drawArrow(LEFT, 11, 10, 3, SSD1306_BLACK);
        }
        else
        {
          display.fillRoundRect(selL, 21 + 12 * selectedY, itmPx, 13, 4, SSD1306_WHITE);
          display.setTextColor(SSD1306_BLACK);
          drawStr(items[selectedY], 0, 24 + (12 * selectedY), align);
        }
        display.display();

        wait();
        delay(100);
        return selectedY;
      }
      else
      {
        if (btnEvent == TOP)
          selectedY--; // top
        else if (btnEvent == BOTTOM)
          selectedY++; // bottom
        wait();
        break;
      }
    }

    if (hasBack)
    {
      if (selectedY == -2)
        selectedY = 2;
      else if (selectedY == iSz)
        selectedY = -1;
    }
    else
    {
      if (selectedY == -1)
        selectedY = iSz - 1;
      else if (selectedY == iSz)
        selectedY %= iSz;
    }
  }
}

int drawSetting(const char *header PROGMEM,
                const char *settingsName[] PROGMEM,
                const short int settingsSize PROGMEM,
                const char *choices[][6] PROGMEM,
                const int choicesSizes[] PROGMEM,
                const int currentPage PROGMEM,
                const int currentValue PROGMEM,
                int selectedY = 0,
                bool hasBack = true,
                int align = 1)
{

  int selectedX = currentValue,
      iSz = 2;
  while (true)
  {
    int btnEvent = btnClick();

    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);

    drawStr(header, 0, 7, align);
    drawStr(settingsName[currentPage], 0, 21, align);

    if (hasBack)
    {
      drawArrow(LEFT, 11, 10, 3, SSD1306_WHITE);
      if (selectedY == -1)
        display.drawRoundRect(5, 4, 17, 13, 4, SSD1306_WHITE);
    }

    if (selectedY == 1)
    {
      display.drawRoundRect(15, 48, 98, 13, 4, SSD1306_WHITE);
    }

    const int topScrl = 54;
    if (currentPage != settingsSize - 1)
    {
      drawArrow(RIGHT, 103, topScrl, 2, SSD1306_WHITE);
    }
    if (currentPage != 0)
    {
      drawArrow(LEFT, 25, topScrl, 2, SSD1306_WHITE);
    }

    int pos = (SCREEN_WIDTH / choicesSizes[currentPage]),
        adj = -11;
    for (int k = 0; k < choicesSizes[currentPage]; k++)
    {
      int curChSz = strlen(choices[currentPage][k]),
          curChPx = (curChSz * 5) + curChSz - 1,
          curPos = (pos * (k + 1)),
          curLnL = curPos - curChPx / 2 + adj,
          curLnR = curPos + curChPx / 2 + adj;

      drawStr(choices[currentPage][k], curLnL, 33, 0);
      if (currentValue == k)
        display.drawLine(curLnL, 42, curLnR, 42, SSD1306_WHITE);
      if (selectedX == k && selectedY == 0)
        display.drawRoundRect(curLnL - 7, 29, curChPx + 14, 17, 4, SSD1306_WHITE);
    }

    const int indcS = (SCREEN_WIDTH - settingsSize * 10 - adj) / 2;
    for (int h = 0; h < settingsSize; h++)
    {
      if (h == currentPage)
        display.fillCircle(indcS + (10 * h), topScrl, 1, SSD1306_WHITE);
      else
        display.fillCircle(indcS + (10 * h), topScrl, 0, SSD1306_WHITE);
    }
    display.display();

    while (btnClick() != 0)
    {
      btnEvent = btnClick();

      if (btnEvent == 1)
      {
        if (selectedY == 0)
        {
          int curChSz = strlen(choices[currentPage][selectedX]),
              curChPx = (curChSz * 5) + curChSz - 1,
              curPos = (pos * (selectedX + 1)),
              curLnL = curPos - curChPx / 2 + adj,
              curLnR = curPos + curChPx / 2 + adj;

          display.fillRoundRect(curLnL - 7, 29, curChPx + 14, 17, 4, SSD1306_WHITE);

          display.setTextColor(SSD1306_BLACK);
          drawStr(choices[currentPage][selectedX], curLnL, 33, 0);
          display.drawLine(curLnL, 42, curLnR, 42, SSD1306_BLACK);

          display.display();
          wait();
          delay(100);
          return selectedX;
        }
        else if (selectedY == -1)
        {
          display.fillRoundRect(5, 4, 17, 13, 4, SSD1306_WHITE);
          drawArrow(LEFT, 11, 10, 3, SSD1306_BLACK);

          display.display();
          wait();
          delay(100);
          return -1;
        }
      }
      else
      {
        if (selectedY == 0)
        {
          if (btnEvent == LEFT)
            selectedX--; // left
          else if (btnEvent == RIGHT)
            selectedX++; // right
        }
        else if ((selectedY == 1) && (btnEvent == LEFT || btnEvent == RIGHT))
        {
          display.fillRoundRect(15, 48, 98, 13, 4, SSD1306_WHITE);

          if (currentPage == 0)
          {
            drawArrow(RIGHT, 103, topScrl, 2, SSD1306_BLACK);
            if (btnEvent == LEFT)
              continue;
          }
          else if (currentPage == settingsSize - 1)
          {
            drawArrow(LEFT, 25, topScrl, 2, SSD1306_BLACK);
            if (btnEvent == RIGHT)
              continue;
          }
          else
          {
            drawArrow(LEFT, 25, topScrl, 2, SSD1306_BLACK);
            drawArrow(RIGHT, 103, topScrl, 2, SSD1306_BLACK);
          }

          for (int h = 0; h < settingsSize; h++)
          {
            if (h == currentPage)
              display.fillCircle(indcS + (10 * h), topScrl, 1, SSD1306_BLACK);
            else
              display.fillCircle(indcS + (10 * h), topScrl, 0, SSD1306_BLACK);
          }

          display.display();
          wait();
          delay(100);

          if (btnEvent == LEFT)
            return LEFT; // left
          else if (btnEvent == RIGHT)
            return RIGHT; // right
        }

        if (btnEvent == TOP)
          selectedY--; // top
        else if (btnEvent == BOTTOM)
          selectedY++; // bottom

        wait();
        break;
      }
    }

    if (hasBack)
    {
      if (selectedY == -2)
        selectedY = 1;
      else if (selectedY == iSz)
        selectedY = -1;
    }
    else
    {
      if (selectedY == -1)
        selectedY = iSz - 1;
      else
        selectedY %= iSz;
    }
    if (selectedX == -1)
      selectedX = choicesSizes[currentPage] - 1;
    else
      selectedX %= choicesSizes[currentPage];
  }
}


const char *MESSAGE_CONFIGURE_WIFI[4] = {"Scan QR", "to setup", "Wi-Fi.", ""};
const char *MESSAGE_OPEN_WEBAPP[4] = {"Scan QR", "to open", "the app.", ""};

void drawQrCode(const char* qrStr, const char* lines[]) {
  display.fillRect(0, 0, 128, 64, 1);

	uint8_t qrcodeData[qrcode_getBufferSize(3)];
	qrcode_initText(&qrcode, qrcodeData, 3, ECC_LOW, qrStr);
 
  // Text starting point
  int cursor_start_y = 10;
  int cursor_start_x = 4;
  int font_height = 12;

	// QR Code Starting Point
  int offset_x = 67;
  int offset_y = 3;

  for (int y = 0; y < qrcode.size; y++) {
    for (int x = 0; x < qrcode.size; x++) {
      int newX = offset_x + (x * 2);
      int newY = offset_y + (y * 2);

      if (qrcode_getModule(&qrcode, x, y)) {
        display.fillRect( newX, newY, 2, 2, 0);
      }
      else {
        display.fillRect( newX, newY, 2, 2, 1);
      }
    }
  }

  display.setTextColor(0,1);
  for (int i = 0; i < 4; i++) {
    display.setCursor(cursor_start_x,cursor_start_y+font_height*i);
    display.println(lines[i]);
  }
  display.display();
}


void setup()
{
  // pinMode(BTN_NAV, INPUT);
  pinMode(BTN_X, INPUT_PULLDOWN);
  pinMode(BTN_Y, INPUT_PULLDOWN);
  pinMode(BTN_E, INPUT_PULLDOWN);

  Serial.begin(9600);


  // initialize the OLED object
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ; // Don't proceed, loop forever
  }
  display.clearDisplay();

  display.setTextColor(1);
  drawStr("Chili Con Labyu", 0, 28, 1);
  display.display();

  delay(3000);

  // Clear the buffer.
  display.clearDisplay();

  SPIFFS.begin();
}

int MainMenu()
{
  const char *items[] PROGMEM = {
      "CONNECT TO WiFi",
      "PAIR PHONE",
      "UI SETTINGS"};
  const int sz PROGMEM = sizeof(items) / sizeof(char *);
  return drawMenu("SETTINGS", items, sz, false);
}

int Settings(int page, int curVal, int selY = 0)
{
  const int pages PROGMEM = 3;
  const char *settings[pages] PROGMEM = {
      "SNAKE SPEED",
      "BRIGHTNESS",
      "VOLUME"};
  const char *choices[pages][6] PROGMEM = {
      {"-2",
       "-1",
       "0",
       "+1",
       "+2"},
      {"1",
       "2",
       "3",
       "4",
       "5"},
      {"0",
       "1",
       "2",
       "3",
       "4",
       "5"}

  };
  const int choicesSizes[pages] PROGMEM{
      5,
      5,
      6};

  return drawSetting("UI SETTINGS", settings, pages, choices, choicesSizes, page, curVal, selY);
}

int prev_button = -1;
void loop()
{
  int mainRes = MainMenu();
  if (mainRes == -1)
  {
    display.clearDisplay();
    display.display();
    wait(true);
  }
  else if (mainRes == 0){
    display.clearDisplay();
    display.display();

    display.fillRect(0, 0, 128, 64, 1);
    display.setTextColor(0);

    drawStr("Opening WiFi...", 0, 28, 1);
    display.display();

    IPAddress apIP(8, 8, 4, 4); // The default android DNS

    WiFi.mode(WIFI_AP);
    WiFi.softAP(ssid, pass);
    WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));

    serverDNS.start(53, "*", apIP);
    serverWifi.begin();

    drawQrCode(
      ("WIFI:S:" + String(ssid) + ";T:WPA;P:" + String(pass) + ";;").c_str(), 
      MESSAGE_CONFIGURE_WIFI);

    int redraw = 0, redraw1 = 1; 
    while (btnClick() == 0)
    {
      serverDNS.processNextRequest();
      WiFiClient client = serverWifi.available(); // listen for incoming clients

      //Serial.println(String("http://" + WiFi.softAPIP().toString()).c_str())

      if (client)
      {
        String currentLine = "";
        String ssidValue = "";     // Variable to store the SSID value from the form
        String passwordValue = ""; // Variable to store the password value from the form

        wifi_sta_list_t stationList;
    
        if (esp_wifi_ap_get_sta_list(&stationList) == ESP_OK && redraw1) {
          uint8_t *mac = stationList.sta[0].mac;
          char macStr[18];
          snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
                  mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
                  
          display.fillRect(0, 0, 128, 64, 1);
          display.setTextColor(0);
          drawStr("CONNECTED CLIENT", 0, 10, 1);
          drawStr(macStr, 0, 20, 1);
          drawStr("Waiting...", 0, 45, 1);
          display.display();

          redraw1 = 0;
        }

        while (client.connected())
        {
          if (client.available())
          {
            char c = client.read();
            if (c == '\n')
            {
              if (currentLine.length() == 0)
              {
                client.print(R"(
                  <!DOCTYPE html>
                  <html>
                  <head>
                    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
                    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
                    <title>Connect to Wifi</title>
                    <style>
                      body { font-family: Arial, sans-serif; background-color: #f2f2f2; text-align: center; }
                      form { background-color: #ffffff; padding: 20px; border-radius: 10px; display: inline-block; }
                      input[type=text], input[type=password] { width: 100%; padding: 12px 20px; margin: 8px 0; box-sizing: border-box; border: 2px solid #ccc; border-radius: 4px; }
                      input[type=submit] { background-color: #4CAF50; color: white; padding: 14px 20px; margin: 10px 0; border: none; border-radius: 4px; cursor: pointer; }
                    </style>
                  </head>
                  <body>
                    <h1>Enter your WiFi infos</h1>
                    <form method="post" action="/connect" method="POST">
                      SSID: <input type="text" name="SSID"><br>
                      Password: <input type="password" name="password"><br>
                      <input type="submit" value="Connect">
                    </form>
                  </body>
                  </html>
                  )");
                
                break;
              }
              else
              {
                currentLine = "";
              }
            }
            else if (c != '\r')
            {
              currentLine += c;
            }

            // Check if the current line starts with "POST /connect" indicating a form submission
            if (currentLine.startsWith("POST /connect"))
            {
              // Read and discard the headers until we find an empty line
              while (client.available() && client.read() != '\n')
              {
              }

              // Read the content of the POST request (form data)
              while (client.available())
              {
                String postData = client.readStringUntil('\n');
                std::string s = postData.c_str();

                ssidValue = postData.substring(s.find("SSID=") + 5, s.find("&")); // Extract the SSID value
                passwordValue = postData.substring(s.find("password=") + 9); // Extract the password value
              }

              // Print the captured SSID and password values to the Serial Monitor
              
              Serial.print("\n\nSSID: ");
              Serial.println(ssidValue);
              Serial.print("Password: ");
              Serial.println(passwordValue);


              WiFi.begin(ssidValue.c_str(), passwordValue.c_str());

              display.clearDisplay();
              display.display();
              display.setTextColor(1);

              while (WiFi.status() != WL_CONNECTED)
              {
                delay(500);
                drawStr("Connecting...", 0, 28, 1);
                display.display();

                Serial.print(WiFi.status());
              }

              display.clearDisplay();
              display.display();
              display.setTextColor(1);

              drawStr("CONNECTED", 0, 7, 1);
              drawStr((String("SSID: ") + WiFi.SSID()).c_str(), 7, 22, 0);
              drawStr((String("IP: ") + WiFi.localIP()).c_str(), 7, 31, 0);
            
              display.drawRoundRect(45, 47, 37, 13, 4, 1);
              display.setTextColor(1);
              drawStr("EXIT", 0, 50, 1);
            
              display.display();

              
              Serial.println();
              Serial.println("WiFi connected!");
              Serial.print("SSID: ");
              Serial.println(WiFi.SSID());
              Serial.print("IP address: ");
              Serial.println(WiFi.localIP());

              client.stop();
              WiFi.softAPdisconnect(true);

              wait(1);

              display.fillRoundRect(45, 47, 37, 13, 4, 1);
              display.setTextColor(0);
              drawStr("EXIT", 0, 50, 1);
              display.display();

              wait();
              delay(100);


              return;
            }
          }
          else
            redraw = 1;
        }
        client.stop();
      }
    }
  }
  else if (mainRes == 1){
    display.clearDisplay();
    display.display();
    wait(1);
  }
  
  /*
  else if (mainRes == 1){
    while (WiFi.status() != WL_CONNECTED)
    {
      display.clearDisplay();
      display.display();

      drawQrCode(
        ("WIFI:S:" + String(ssid) + ";T:WPA;P:" + String(pass) + ";;").c_str(), 
        MESSAGE_CONFIGURE_WIFI);
    }

    while (btnClick() == 0){
      WiFiClient client = serverWifi.available(); // Listen for incoming clients

      // If a new client connects
      if (client)
      {
        display.clearDisplay();
        display.display();
        
        display.setTextColor(1);
        drawStr("Connected", 0, 28, 1);
        display.display();

        delay(2000);

        display.clearDisplay();
        display.display();

        while (btnClick() == 0)
        {

          WiFiClient client = serverWifi.available(); // Listen for incoming clients

          drawQrCode(
              String("http://" + WiFi.softAPIP().toString()).c_str(),
              MESSAGE_OPEN_WEBAPP);

          String currentLine = ""; // make a String to hold incoming data from the client
          while (client.connected())
          {

            if (client.available())
            {                         // if there's bytes to read from the client,
              char c = client.read(); // read a byte, then
              Serial.write(c);        // print it out the serial monitor
              header += c;
              if (c == '\n')
              { // if the byte is a newline character
                // if the current line is blank, you got two newline characters in a row.
                // that's the end of the client HTTP request, so send a response:
                if (currentLine.length() == 0)
                {
                  // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
                  // and a content-type so the client knows what's coming, then a blank line:
                  client.println("HTTP/1.1 200 OK");
                  client.println("Content-type:text/html");
                  client.println("Connection: close");
                  client.println();

                  // turns the GPIOs on and off
                  if (header.indexOf("GET /26/on") >= 0)
                  {
                    Serial.println("GPIO 26 on");
                    output26State = "on";
                    // digitalWrite(output26, HIGH);
                  }
                  else if (header.indexOf("GET /26/off") >= 0)
                  {
                    Serial.println("GPIO 26 off");
                    output26State = "off";
                    // digitalWrite(output26, LOW);
                  }
                  else if (header.indexOf("GET /27/on") >= 0)
                  {
                    Serial.println("GPIO 27 on");
                    output27State = "on";
                    // digitalWrite(output27, HIGH);
                  }
                  else if (header.indexOf("GET /27/off") >= 0)
                  {
                    Serial.println("GPIO 27 off");
                    output27State = "off";
                    // digitalWrite(output27, LOW);
                  }

                  // Display the HTML web page
                  client.println("<!DOCTYPE html><html>");
                  client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
                  client.println("<link rel=\"icon\" href=\"data:,\">");
                  // CSS to style the on/off buttons
                  // Feel free to change the background-color and font-size attributes to fit your preferences
                  client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
                  client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
                  client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
                  client.println(".button2 {background-color: #555555;}</style></head>");

                  // Web Page Heading
                  client.println("<body><h1>ESP32 Web serverWifi</h1>");

                  // Display current state, and ON/OFF buttons for GPIO 26
                  client.println("<p>GPIO 26 - State " + output26State + "</p>");
                  // If the output26State is off, it displays the ON button
                  if (output26State == "off")
                  {
                    client.println("<p><a href=\"/26/on\"><button class=\"button\">ON</button></a></p>");
                  }
                  else
                  {
                    client.println("<p><a href=\"/26/off\"><button class=\"button button2\">OFF</button></a></p>");
                  }

                  // Display current state, and ON/OFF buttons for GPIO 27
                  client.println("<p>GPIO 27 - State " + output27State + "</p>");
                  // If the output27State is off, it displays the ON button
                  if (output27State == "off")
                  {
                    client.println("<p><a href=\"/27/on\"><button class=\"button\">ON</button></a></p>");
                  }
                  else
                  {
                    client.println("<p><a href=\"/27/off\"><button class=\"button button2\">OFF</button></a></p>");
                  }
                  client.println("</body></html>");

                  // The HTTP response ends with another blank line
                  client.println();
                  // Break out of the while loop
                  break;
                }
                else
                { // if you got a newline, then clear currentLine
                  currentLine = "";
                }
              }
              else if (c != '\r')
              {                   // if you got anything else but a carriage return character,
                currentLine += c; // add it to the end of the currentLine
              }
            }
          }
        
        }
      }
    }
  }
  */
  
  else if (mainRes == 2)
  {
    int tmp = 0,
        page = 0,
        selY = 0;
    while (true)
    {
      if (page == -1)
        page = 0;
      else if (page == 3)
        page = 2;

      tmp = Settings(page, setVals[page], selY);

      if (tmp == -1)
        break;
      else if (tmp == LEFT)
      {
        page--;
        selY = 1;
      }
      else if (tmp == RIGHT)
      {
        page++;
        selY = 1;
      }
      else
      {
        setVals[page] = tmp;

        display.ssd1306_command(0x81);
        display.ssd1306_command(1 + 51 * setVals[1]);
        selY = 0;
      }
    }
  }
}